package com.supplychain.risk.repository;

import com.supplychain.risk.entity.RiskAlert;
import com.supplychain.risk.entity.Supplier;
import com.supplychain.risk.entity.Shipment;
import com.supplychain.risk.enums.RiskLevel;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface RiskAlertRepository extends JpaRepository<RiskAlert, Long> {
    
    List<RiskAlert> findByIsActiveTrue();
    
    List<RiskAlert> findByRiskLevel(RiskLevel riskLevel);
    
    List<RiskAlert> findByAlertType(String alertType);
    
    List<RiskAlert> findBySupplier(Supplier supplier);
    
    List<RiskAlert> findByShipment(Shipment shipment);
    
    List<RiskAlert> findByIsAcknowledgedFalse();
    
    @Query("SELECT r FROM RiskAlert r WHERE r.supplier.id = :supplierId AND r.isActive = true")
    List<RiskAlert> findActiveAlertsBySupplierId(@Param("supplierId") Long supplierId);
    
    @Query("SELECT r FROM RiskAlert r WHERE r.shipment.id = :shipmentId AND r.isActive = true")
    List<RiskAlert> findActiveAlertsByShipmentId(@Param("shipmentId") Long shipmentId);
    
    @Query("SELECT r FROM RiskAlert r WHERE r.riskLevel = :riskLevel AND r.isActive = true")
    List<RiskAlert> findActiveAlertsByRiskLevel(@Param("riskLevel") RiskLevel riskLevel);
    
    @Query("SELECT r FROM RiskAlert r WHERE r.createdAt >= :startDate ORDER BY r.createdAt DESC")
    List<RiskAlert> findRecentAlerts(@Param("startDate") LocalDateTime startDate);
    
    @Query("SELECT r FROM RiskAlert r WHERE r.isActive = true AND r.isAcknowledged = false ORDER BY r.riskLevel DESC, r.createdAt DESC")
    List<RiskAlert> findUnacknowledgedActiveAlerts();
    
    @Query("SELECT r FROM RiskAlert r WHERE r.affectedRegion = :region AND r.isActive = true")
    List<RiskAlert> findActiveAlertsByRegion(@Param("region") String region);
    
    @Query("SELECT COUNT(r) FROM RiskAlert r WHERE r.riskLevel = :riskLevel AND r.isActive = true")
    long countActiveAlertsByRiskLevel(@Param("riskLevel") RiskLevel riskLevel);
    
    @Query("SELECT COUNT(r) FROM RiskAlert r WHERE r.alertType = :alertType AND r.isActive = true")
    long countActiveAlertsByType(@Param("alertType") String alertType);
    
    @Query("SELECT COUNT(r) FROM RiskAlert r WHERE r.isActive = true AND r.isAcknowledged = false")
    long countUnacknowledgedActiveAlerts();
    
    @Query("SELECT r FROM RiskAlert r WHERE r.autoGenerated = true AND r.isActive = true")
    List<RiskAlert> findAutoGeneratedActiveAlerts();
}