version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: supply-chain-db
    environment:
      POSTGRES_DB: smart_supply_chain
      POSTGRES_USER: supply_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-supply_pass_dev}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    networks:
      - supply-chain-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U supply_user -d smart_supply_chain"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: supply-chain-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - supply-chain-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: redis-server --appendonly yes

  # ML Prediction Service
  ml-service:
    build:
      context: ./smart-supply-chain-ml-service
      dockerfile: Dockerfile
    container_name: supply-chain-ml-service
    environment:
      PORT: 5000
      FLASK_ENV: production
    ports:
      - "${ML_SERVICE_PORT:-5000}:5000"
    networks:
      - supply-chain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Spring Boot backend
  backend:
    build:
      context: ./smart-supply-chain-backend
      dockerfile: Dockerfile
    container_name: supply-chain-backend
    environment:
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/smart_supply_chain
      SPRING_DATASOURCE_USERNAME: supply_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-supply_pass_dev}
      
      # JPA configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: ${DEBUG_SQL:-false}
      
      # JWT configuration
      JWT_SECRET: ${JWT_SECRET:-smartSupplyChainSecretKey2024!@#$%^&*()}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      
      # CORS configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost}
      
      # Redis configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      
      # Logging
      LOGGING_LEVEL_COM_SUPPLYCHAINRISK: ${LOG_LEVEL:-INFO}
      
      # Application profile
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILE:-production}
      
      # ML Service integration
      ML_SERVICE_URL: ${ML_SERVICE_URL:-http://ml-service:5000}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    volumes:
      - backend_logs:/app/logs
    networks:
      - supply-chain-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # React frontend
  frontend:
    build:
      context: ./smart-supply-chain-frontend
      dockerfile: Dockerfile
    container_name: supply-chain-frontend
    environment:
      REACT_APP_API_URL: ${FRONTEND_API_URL:-http://localhost:8080}
      REACT_APP_WS_URL: ${FRONTEND_WS_URL:-ws://localhost:8080}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - supply-chain-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:1.24-alpine
    container_name: supply-chain-proxy
    ports:
      - "${PROXY_PORT:-80}:80"
      - "${PROXY_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - supply-chain-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  supply-chain-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16